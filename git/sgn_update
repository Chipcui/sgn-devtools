#!/usr/bin/env perl
use strict;
use warnings;
use Cwd;
use feature 'say';

=head1 NAME

sgn_update - A script to keep all SGN repos updated

=cut

=head1 SYNOPSIS

Run this script from the directory which has all of your SGN repos. It will
stash uncommitted changes on top of whatever the current branch is in each repo,
change to the master branch and run

    git fetch --all; git rebase origin/master

If there are conflicts during the rebase, it will leave the repo in that state.

All output is saved to the file 'sgn_update.log' in the current directory.
Commands that are run are printed out prefixed with their current working
directory followed by a colon, i.e :

/home/foo/bar : git fetch

=head1 EXAMPLE

If you want to do the same to other repos, add the directory names as arguments to the script, i.e :

    sgn_update /my/other/repo


=cut

my $cwd = getcwd;
my $logfile = 'sgn_update.log';
# Clobber the old sgn.log
open(my $fh, '>', $logfile) or die $!;

my @repos = ( qw/sgn cxgn-corelibs ITAG tomato_genome
               Phenome Cview bio-chado-loader bio-chado-schema
               sgn-devtools biosource sgn-home bio-gff3
               perlcyc javacyc SMMID gff3_validator yapri
               Ambikon Ambikon-IntegrationServer catalyst-view-bio-seqio
               sgn-devtools art/, @ARGV);

for my $repo (grep { -d $_ } @repos) {
    chdir $repo;
    my $status = qx{ git status -u };
    chomp( my $branch = qx{ git rev-parse --symbolic-full-name HEAD } );

    if ($branch =~ m/HEAD/) {
        print "$repo was in detached HEAD state, leaving alone\n";
        chdir $cwd;
        next;
    }
    $branch =~ s!refs/heads/!!g;

    # This will stash changes on top of whatever the current branch is
    my $stashed = stash_if_necessary($repo, $status);

    print "Rebasing master branch of $repo from origin\n";
    run_command("git checkout master");
    if ($?) {
        handle_errors($?);
        say "Could not checkout master branch of $repo!";
        chdir $cwd;
        next;
    } else {
        # The next two commands are similar to git pull --rebase origin master
        # except all remote branches are copied to the local index
        # and working copy is not changed
        run_command("git fetch");

        # We could get conflicts!
        run_command("git rebase origin/master");
        handle_errors($?) if $?;

        if( -e "Build.PL" ) {
            run_command("perl Build.PL");
            if (-e "Build") {
                run_command("./Build installdeps");
                run_command("./Build");
            }
        }

        run_command("git checkout $branch");
        if ($?) {
            handle_errors($?);
            print "Could not change back to $branch in $repo !\n";
            chdir $cwd;
            next;
        }
        run_command("git stash pop") if $stashed;
    }
    chdir $cwd;
}

print "\n\nSGN repos updated! Make sure to restart your Catalyst dev server!\n\n";
close $fh;

sub run_command {
    my $cmd = shift;
    my $cwd = getcwd;
    say $cmd;
    print $fh "$cwd : $cmd\n";
    system("$cmd 2>&1 >> ../$logfile");
}

sub stash_if_necessary {
    my ($repo, $status) = @_;
    unless ($status =~ m/(nothing to commit|nothing added to commit)/) {
        print "Stashing work in $repo\n";
        system("git stash");
        if( $? ) {
            handle_errors($?);
            print "Stashing failed!\n";
            return 0;
        }
        return 1;
    } else {
        print  "Nothing to stash in $repo\n";
        return 0;
    }
}
sub handle_errors {
    my ($exit_code) = @_;
    if ($exit_code == -1) {
        print "Error: failed to execute: $!\n";
    } elsif ($exit_code & 127) {
        printf "Error: child died with signal %d, %s coredump\n",
            ($exit_code & 127),  ($exit_code & 128) ? 'with' : 'without';
    } else {
        printf "Error: child exited with value %d\n", $? >> 8;
    }
}
